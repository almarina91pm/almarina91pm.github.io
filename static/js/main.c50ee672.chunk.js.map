{"version":3,"sources":["utils/enums.js","context/generalContext.js","context/userContext.js","components/Content/common/SignInForm.js","components/Content/common/SignUp.js","context/displayContext.js","components/Content/Header/Header.js","context/tasksContext.js","context/currentProjectContext.js","context/editContext.js","context/refreshProjectListContext.js","components/Content/SideBar/Projects.js","context/newProjectContext.js","components/Content/SideBar/SideBar.js","components/Content/ProjectSection/ProjectDescription.js","context/allUsersContext.js","components/Content/ProjectSection/ProjectUsers.js","components/Content/ProjectSection/ProjectTasks.js","components/Content/common/UsersSelect.js","components/Content/common/StatusSelection.js","components/Content/ProjectSection/CreateTask.js","components/Content/common/UsersMultiple.js","components/Content/ProjectSection/EditProject.js","components/Content/ProjectSection/EditTask.js","components/Content/ProjectSection/DeleteTask.js","components/Content/ProjectSection/TaskSection.js","components/Content/ProjectSection/DeleteProject.js","components/Content/EditSection/EditSection.js","components/Content/ProjectSection/ProjectSection.js","components/Content/WelcomeSection/Welcome.js","components/Content/ProjectSection/CreateTeam.js","components/Content/CreateNewProject/CreateNewProject.js","components/Content/ProjectSection/DeletedMessage.js","components/Content/EditUser/EditUser.js","components/Content/LogOut/LogOutAllButton.js","components/Content/LogOut/LogOutButton.js","components/Content/LogOut/LogOut.js","components/Content/ContentSection.js","components/Content/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["CLASS","CONTROL_ID","FORM_TYPES","BUTTON_TYPES","VARIANTS","VALIDATE","ERRORS","ROLE","developer","projectManager","admin","OPTION_VALUES","PLACEHOLDER","generalContext","createContext","useGeneralContext","useContext","ContextProvider","children","useState","projectsVisible","setProjectsVisible","currentProjectRole","setCurrentProjectRole","Provider","value","requestUrl","userContext","useUserContext","UserContextProvider","userData","setUserData","token","setToken","userProjects","setUserProjects","validate","values","errors","email","test","password","SignInForm","inputUserData","setInputUserData","fetchError","setFetchError","history","useHistory","shouldFetch","setShouldFetch","formik","useFormik","validateOnChange","validateOnBlur","initialValues","onSubmit","submitHandler","event","a","preventDefault","handleSubmit","useEffect","fetch","method","headers","body","JSON","stringify","then","res","json","data","message","Error","Object","keys","length","user","push","from","catch","e","console","log","Accordion","Card","Toggle","as","Header","className","eventKey","Collapse","Body","Form","autoComplete","Group","controlId","Control","type","placeholder","name","onChange","handleChange","Button","variant","onClick","surname","username","SignUp","displayContext","useDisplayContext","DisplayContextProvider","displayProject","setDisplayProject","displayWelcome","setDisplayWelcome","displayNewProject","setDisplayNewProject","displayDeletedMessage","setDisplayDeletedMessage","displayEditUser","setDisplayEditUser","displayLogOut","setDisplayLogOut","tasksContext","useTasksContext","TasksContextProvider","currentTask","setCurrentTask","currentProjectContext","useCurrentProjectContext","CurrentProjectContextProvider","currentProject","setCurrentProject","tasksForCurrentProject","setTasksForCurrentProject","editContext","useEditContext","EditContextProvider","showTaskDetails","setShowTaskDetails","addTaskChecked","setAddTaskChecked","editProjectChecked","setEditProjectChecked","deleteProjectChecked","setDeleteProjectChecked","refreshProjectListContext","useRefreshProjectListContext","RefreshProjectListContextProvider","refreshProjectList","setRefreshProjectList","Projects","_id","map","project","usersInvolved","rolesOfUser","forEach","id","role","handleViewProject","newProjectContext","useNewProjectContext","NewProjectContextProvider","adminID","setAdminID","projectManagerID","setProjectManagerID","developersIDs","setDevelopersIDs","showTasks","setShowTasks","SideBar","defaultActiveKey","ProjectDescription","code","allUsersContext","useAllUsersContext","AllUsersContextProvider","allUsers","setAllUsers","ProjectUsers","users","userFound","find","one","ProjectTasks","projectProgress","numberOfTasks","currentTotal","task","progress","Math","floor","ProgressBar","now","includes","taskTitle","status","UsersSelect","key","StatusSelection","CreateTask","newTasksList","setNewTasksList","useRef","description","assignee","setAssignee","setStatus","deadline","setDeadline","updateTasks","setUpdateTasks","createdMessage","setCreatedMessage","Col","sm","Row","Label","required","size","ref","target","defaultValue","current","projectID","disabled","multiple","UsersMultiple","EditProject","newAdminID","setNewAdminID","newProjectManagerID","setNewProjectManagerID","newDevelopersIDs","setNewDevelopersIDs","newProjectTitle","newProjectCode","updatedInput","setUpdatedInput","selectedItems","devsIDs","i","handleSelect","selectedOptions","developers","dev","EditTask","newTaskTitle","newDescription","newProgress","newTaskStatus","setNewTaskStatus","newTaskAssignee","setNewTaskAssignee","newDeadline","setNewDeadline","updatedMessage","setUpdatedMessage","currentAssignee","newTaskData","split","DeleteTask","deletedMessage","setDeletedMessage","TaskSection","editTaskVisible","setEditTaskVisible","deleteTaskVisible","setDeleteTaskVisible","label","DeleteProject","EditSection","ProjectSection","Welcome","CreateTeam","CreateNewProject","fetchProject","setFetchProject","projectTitle","projectCode","inputProject","developersSet","completeDev","filter","column","span","DeletedMessage","EditUser","displaySuccessMessage","setDisplaySuccessMessage","LogOutAllButton","LogOutButton","LogOut","ContentSection","MainPage","App","path","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50ee672.chunk.js","sourcesContent":["export let CLASS = {\n    mainContainer: 'mainContainer',\n    newAccTitle:'newAccountTitle',\n    welcomeTitle:'welcomeTitle',\n    newAccMessage:'newAccountMessage',\n    welcomeMessage: 'welcomeMessage',\n    formContainer:'formContainer',\n    header: 'header',\n    pageContainer:'pageContainer',\n    content: 'content',\n    sectionTitle:'sectionTitle',\n    subtitleContent:'subtitleContent',\n    subTitleContentTasks:'subTitleContentTasks',\n    subSectionTitle: 'subSectionTitle',\n    cardBody: 'cardBody',\n    sideBar:'sideBar',\n    list: 'list',\n    listTitle: 'listTitle',\n    background: 'background1',\n    inputErrors: 'inputErrors',\n    smallButton: 'smallButton',\n    welcome: 'welcomePage',\n    projectSection: 'projectSection',\n    subsectionTitle: 'subsectionTitle',\n    accordionTitle: 'accordionTitle',\n    elementsListed: 'elementsListed',\n    projectTitle: 'projectTitle',\n    saveButton: 'saveButton',\n    headerButton: 'headerButton',\n    title: 'title',\n    fillInAllMessage: 'fillInAllMessage',\n    leftProjectDivision: 'leftProjectDivision',\n    rightProjectDivision: 'rightProjectDivision',\n    cancelButton: 'cancelButton',\n    editSection: 'editSection'\n}\n\nexport let CONTROL_ID={\n    formUsername: 'formBasicUsername',\n    formName: 'formBasicName',\n    formSurname: 'formBasicSurname',\n    formEmail: 'formBasicEmail',\n    formPassword: 'formBasicPassword'\n}\n\nexport let FORM_TYPES={\n    username: 'username',\n    name: 'name',\n    surname: 'surname',\n    email: 'email',\n    password: 'password'\n}\n\nexport let BUTTON_TYPES={\n    submit: 'submit'\n}\n\nexport let VARIANTS={\n    success: 'success',\n    info: 'info',\n    outlineDanger: 'outline-danger',\n    outlineInfo: 'outline-info',\n    light: 'light'\n}\n\nexport let VALIDATE = {\n    emailError: 'enter a valid email',\n    required: 'required'\n}\n\nexport let ERRORS = {\n    specialChar: 'password must contain at least one special character',\n    number: 'password must contain at least one number',\n    lowercase: 'password must contain at least one lowercase letter',\n    uppercase: 'password must contain at least one uppercase letter',\n    eightCharacters: 'password must contain at least 8 characters',\n    invalidEmail: 'invalid email',\n    wrongInput :'wrong email or password'\n}\n\nexport let ROLE = {\n    developer: 'developer',\n    projectManager: 'projectManager',\n    admin: 'admin'\n}\n\nexport let OPTION_VALUES = {\n    new: 'new',\n    inProgress: 'in progress',\n    finished: 'finished'\n}\n\nexport let PLACEHOLDER = {\n    enterTitle: \"please enter a title\",\n    description: 'description'\n}","import React, { createContext, useContext, useState } from 'react';\n\nexport const generalContext = createContext();\n\nexport const useGeneralContext = () => useContext(generalContext);\n\nexport function ContextProvider({children}) {\n\n    const requestUrl = process.env.NODE_ENV === 'development' ?\n        'http://localhost:3001' :\n        'https://almarina91-pm-backend.herokuapp.com';\n\n    const [projectsVisible, setProjectsVisible] = useState(false);\n    const [currentProjectRole, setCurrentProjectRole] = useState('developer');\n\n    return (\n        <generalContext.Provider value={\n            { requestUrl,\n            projectsVisible,\n            setProjectsVisible,\n            currentProjectRole,\n            setCurrentProjectRole\n            }\n        }>\n            {children}\n        </generalContext.Provider>\n    )\n}","import React, {createContext, useContext, useState} from 'react';\n\nexport const userContext = createContext();\n\nexport const useUserContext = () => useContext(userContext);\n\nexport function UserContextProvider({children}) {\n\n    const [userData, setUserData] = useState({});\n    const [token, setToken] = useState('');\n    const [userProjects, setUserProjects] = useState([]);\n\n    return(\n        <userContext.Provider value={{\n            userData,\n            setUserData,\n            token,\n            setToken,\n            userProjects,\n            setUserProjects\n        }}>\n            {children}\n        </userContext.Provider>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport { BUTTON_TYPES, CLASS, CONTROL_ID, FORM_TYPES, VARIANTS, VALIDATE, ERRORS } from '../../../utils/enums';\nimport { useFormik } from 'formik';\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useUserContext } from \"../../../context/userContext\";\n\n/**\n * A component that returns the sign in form.\n * @const validate - checks the user input\n * @const inputUserData - values that user inputted that are validated\n * @const fetchError - if there is some error in fetching, it is displayed\n */\n\nconst validate = values => {\n    const errors = {};\n    if (!values.email) {\n        errors.email = VALIDATE.required;\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = VALIDATE.emailError;\n    }\n    if (!values.password) {\n        errors.password = VALIDATE.required;\n    }\n    return errors;\n};\n\nfunction SignInForm(){\n    const { requestUrl } = useGeneralContext();\n    const { setUserData, setToken } = useUserContext();\n    const [inputUserData, setInputUserData] = useState({});\n    const [fetchError, setFetchError] = useState('');\n    let history = useHistory();\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n\n    const formik = useFormik({\n        validateOnChange:false,\n        validateOnBlur:false,\n        initialValues: {\n            email:'',\n            password: ''\n        },\n        validate,\n        onSubmit: values => {\n            setInputUserData(values)\n            setFetchError('');\n            setShouldFetch(true)\n        },\n    });\n\n    const submitHandler = async(event) => {\n        event.preventDefault();\n        formik.handleSubmit(event);\n    }\n\n    useEffect(()=>{\n        if(shouldFetch){\n            fetch(`${requestUrl}/users/login`,{\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(inputUserData)})\n                .then(res => res.json())\n                .then(data => {\n                    if(data.errors){\n                        setFetchError(data.message)\n                        throw Error\n                    } else if (Object.keys(data).length === 0) {\n                        setFetchError(ERRORS.wrongInput)\n                        throw Error\n                    } else {\n                        setToken(data.token)\n                        setUserData(data.user)\n                    }\n                })\n                .then(()=> {\n                    if(fetchError === ''){\n                        history.push(\"/home\", {from: '/'});\n                        setShouldFetch(false)}\n                })\n                .catch(e => {\n                    setShouldFetch(false)\n                    setUserData({})\n                    console.log(e)\n                })\n        }\n    },[shouldFetch])\n\n    return(\n        <Accordion>\n            <Card>\n                <Accordion.Toggle as={Card.Header} className={CLASS.welcomeTitle} eventKey=\"0\">\n                    welcome back!\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>\n                        <Form className={CLASS.formContainer} autoComplete=\"off\">\n                            <div className={CLASS.welcomeMessage}>continue managing your work</div>\n                            <Form.Group controlId={CONTROL_ID.formEmail}>\n                                <Form.Control type={FORM_TYPES.email}\n                                              placeholder={FORM_TYPES.email}\n                                              data-testid=\"required-input-email\"\n                                              name={FORM_TYPES.email}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.email}/>\n                                { formik.errors.email ? <div className={CLASS.inputErrors}>{formik.errors.email}</div> : null}\n                            </Form.Group>\n                            <Form.Group controlId={CONTROL_ID.formPassword}>\n                                <Form.Control type={FORM_TYPES.password}\n                                              placeholder={FORM_TYPES.password}\n                                              data-testid=\"required-input-password\"\n                                              name={FORM_TYPES.password}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.password}/>\n                                { formik.errors.password ? <div className={CLASS.inputErrors}>{formik.errors.password}</div> : null}\n                            </Form.Group>\n                            { fetchError !== '' ?\n                                <div className={CLASS.inputErrors}>{fetchError}</div>\n                                : null\n                            }\n                            <br/>\n                            <Button variant={VARIANTS.info}\n                                    type={BUTTON_TYPES.submit}\n                                    onClick={(event) => submitHandler(event)}>\n                                sign in now\n                            </Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n    )\n}\n\nexport default SignInForm;","import { Button, Form, Card, Accordion } from \"react-bootstrap\";\nimport { BUTTON_TYPES, CLASS, CONTROL_ID, FORM_TYPES, VARIANTS, VALIDATE, ERRORS } from '../../../utils/enums';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from \"react\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useHistory } from \"react-router-dom\";\nimport { useUserContext } from \"../../../context/userContext\";\n\n/**\n * Sign up form.\n * @const validate - validates the user input\n */\n\nconst validate = values => {\n    const errors = {};\n    if(!values.name) {\n        errors.name = VALIDATE.required;\n    }\n    if(!values.surname) {\n        errors.surname = VALIDATE.required;\n    }\n    if(!values.username){\n        errors.username = VALIDATE.required;\n    }\n    if (!values.password) {\n        errors.password = VALIDATE.required;\n    } else if(values.password.length < 8){\n        errors.password = ERRORS.eightCharacters;\n    } else if(!/[A-Z]/.test(values.password)){\n        errors.password = ERRORS.uppercase;\n    } else if(!/[a-z]/.test(values.password)){\n        errors.password = ERRORS.lowercase;\n    } else if(!/[0-9]/.test(values.password)){\n        errors.password = ERRORS.number;\n    } else if(!/[@#$^+=!]/.test(values.password)){\n        errors.password = ERRORS.specialChar;\n    }\n\n    if (!values.email) {\n        errors.email = VALIDATE.required;\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = ERRORS.invalidEmail;\n    }\n    return errors;\n};\n\nfunction SignUp() {\n    const { requestUrl } = useGeneralContext();\n    const { setUserData, setToken } = useUserContext();\n\n    const [inputUserData, setInputUserData] = useState({});\n    const [fetchError, setFetchError] = useState('');\n    let history = useHistory();\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n\n    const formik = useFormik({\n        validateOnChange:false,\n        validateOnBlur:false,\n        initialValues: {\n            email:'',\n            password: '',\n            surname:'',\n            name:'',\n            username:''\n        },\n        validate,\n        onSubmit: values => {\n            setInputUserData(values)\n            setShouldFetch(true)\n        },\n    });\n\n    const submitHandler = async(event) => {\n        event.preventDefault();\n        formik.handleSubmit(event);\n    }\n\n    useEffect(()=>{\n        if(shouldFetch){\n            setFetchError('');\n            fetch(`${requestUrl}/users`,{\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(inputUserData)})\n            .then(res => res.json())\n            .then(data => {\n                if(data.errors){\n                    setFetchError(data.message)\n                    throw Error\n                } else if (Object.keys(data).length === 0) {\n                    throw Error\n                } else {\n                    setToken(data.token)\n                    setUserData(data.user)\n                }\n            })\n            .then(()=> {\n                if(fetchError === ''){\n                    history.push(\"/home\", {from: '/'});\n                    setShouldFetch(false)}\n                })\n            .catch(e => {\n                setShouldFetch(false)\n                setUserData({})\n                console.log(e)\n            })\n        }\n    },[shouldFetch])\n\n    return(\n        <Accordion>\n            <Card>\n                <Accordion.Toggle as={Card.Header}  className={CLASS.newAccTitle} eventKey=\"1\">\n                    first time here?\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body>\n                        <Form className={CLASS.formContainer}\n                              autoComplete=\"off\">\n                            <div className={CLASS.newAccMessage}>start managing your work</div>\n                            <Form.Group controlId={CONTROL_ID.formUsername}>\n                                <Form.Control type={FORM_TYPES.username}\n                                              placeholder={FORM_TYPES.username}\n                                              data-testid=\"required-input-username\"\n                                              name={FORM_TYPES.username}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.username}\n                                              />\n                                { formik.errors.username ?\n                                    <div className={CLASS.inputErrors}>{formik.errors.username}</div>\n                                    : null\n                                }\n                            </Form.Group>\n                            <Form.Group controlId={CONTROL_ID.formName}>\n                                <Form.Control type={FORM_TYPES.name}\n                                              placeholder={FORM_TYPES.name}\n                                              data-testid=\"required-input-name\"\n                                              name={FORM_TYPES.name}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.name}/>\n                                { formik.errors.name ?\n                                    <div className={CLASS.inputErrors}>{formik.errors.name}</div>\n                                    : null\n                                }\n                            </Form.Group>\n                            <Form.Group controlId={CONTROL_ID.formSurname}>\n                                <Form.Control type={FORM_TYPES.surname}\n                                              placeholder={FORM_TYPES.surname}\n                                              data-testid=\"required-input-surname\"\n                                              name={FORM_TYPES.surname}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.surname}/>\n                                { formik.errors.surname ?\n                                    <div className={CLASS.inputErrors}>{formik.errors.surname}</div>\n                                    : null\n                                }\n                            </Form.Group>\n                            <Form.Group controlId={CONTROL_ID.formEmail}>\n                                <Form.Control type={FORM_TYPES.email}\n                                              placeholder={FORM_TYPES.email}\n                                              data-testid=\"required-input-email\"\n                                              name={FORM_TYPES.email}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.email}/>\n                                { formik.errors.email ?\n                                    <div className={CLASS.inputErrors}>{formik.errors.email}</div>\n                                    : null\n                                }\n                            </Form.Group>\n                            <Form.Group controlId={CONTROL_ID.formPassword}>\n                                <Form.Control type={FORM_TYPES.password}\n                                              placeholder={FORM_TYPES.password}\n                                              data-testid=\"required-input-password\"\n                                              name={FORM_TYPES.password}\n                                              onChange={formik.handleChange}\n                                              value={formik.values.password}/>\n                                { formik.errors.password ?\n                                    <div className={CLASS.inputErrors}>{formik.errors.password}</div>\n                                    : null\n                                }\n                            </Form.Group>\n                            { fetchError !== '' ?\n                                <div className={CLASS.inputErrors}>{fetchError}</div>\n                                : null\n                            }\n                            <Button variant={VARIANTS.success}\n                                    type={BUTTON_TYPES.submit}\n                                    onClick={(event) => submitHandler(event)}>\n                                sign up now\n                            </Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n    )\n}\n\nexport default SignUp;","import React, { createContext, useContext, useState } from 'react';\n\nexport const displayContext = createContext();\n\nexport const useDisplayContext = () => useContext(displayContext);\n\nexport function DisplayContextProvider({ children }) {\n\n    const [displayProject, setDisplayProject] = useState(false);\n    const [displayWelcome, setDisplayWelcome] = useState(true);\n    const [displayNewProject, setDisplayNewProject] = useState(false);\n    const [displayDeletedMessage, setDisplayDeletedMessage] = useState(false);\n    const [displayEditUser, setDisplayEditUser] = useState(false);\n    const [displayLogOut, setDisplayLogOut] = useState(false);\n\n    return(\n        <displayContext.Provider value={{\n            displayWelcome,\n            setDisplayWelcome,\n            displayProject,\n            setDisplayProject,\n            displayNewProject,\n            setDisplayNewProject,\n            displayDeletedMessage,\n            setDisplayDeletedMessage,\n            displayEditUser,\n            setDisplayEditUser,\n            setDisplayLogOut,\n            displayLogOut\n        }}>\n            {children}\n        </displayContext.Provider>\n    )\n}","import { CLASS } from \"../../../utils/enums\";\nimport { useDisplayContext } from \"../../../context/displayContext\";\n\n/**\n * A component that returns a header.\n */\n\nfunction Header() {\n    const { setDisplayEditUser, setDisplayWelcome, setDisplayProject, setDisplayNewProject, setDisplayDeletedMessage, setDisplayLogOut } = useDisplayContext();\n\n    return(\n        <div className={CLASS.header}>\n            <p className={CLASS.title}>project management app\n                <button className={CLASS.headerButton}\n                    onClick={()=> {\n                    setDisplayEditUser(false)\n                    setDisplayNewProject(false)\n                    setDisplayProject(false)\n                    setDisplayWelcome(false)\n                    setDisplayDeletedMessage(false)\n                    setDisplayLogOut(true)}}>\n                log out</button>\n                <button className={CLASS.headerButton}\n                    onClick={()=>{\n                    setDisplayEditUser(true)\n                    setDisplayNewProject(false)\n                    setDisplayProject(false)\n                    setDisplayWelcome(false)\n                    setDisplayDeletedMessage(false)\n                    setDisplayLogOut(false)}}>\n                edit user</button>\n            </p>\n        </div>\n    )\n}\n\nexport default Header;","import React, {createContext, useContext, useState} from 'react';\n\nexport const tasksContext = createContext();\n\nexport const useTasksContext = () => useContext(tasksContext);\n\nexport function TasksContextProvider({children}) {\n\n    const [currentTask, setCurrentTask] = useState('');\n\n    return(\n        <tasksContext.Provider value={{\n            currentTask,\n            setCurrentTask\n        }}>\n            {children}\n        </tasksContext.Provider>\n    )\n}","import React, { createContext, useContext, useState } from 'react';\n\nexport const currentProjectContext = createContext();\n\nexport const useCurrentProjectContext = () => useContext(currentProjectContext);\n\nexport function CurrentProjectContextProvider({ children }) {\n\n    const [currentProject, setCurrentProject] = useState({});\n    const [tasksForCurrentProject, setTasksForCurrentProject] = useState([]);\n\n    return(\n        <currentProjectContext.Provider value={{\n            currentProject,\n            setCurrentProject,\n            tasksForCurrentProject,\n            setTasksForCurrentProject\n        }}>\n            {children}\n        </currentProjectContext.Provider>\n    )\n}","import React, {createContext, useContext, useState} from 'react';\n\nexport const editContext = createContext();\n\nexport const useEditContext = () => useContext(editContext);\n\nexport function EditContextProvider({children}) {\n\n    const [showTaskDetails, setShowTaskDetails] = useState(false);\n    const [addTaskChecked, setAddTaskChecked] = useState(false);\n    const [editProjectChecked, setEditProjectChecked] = useState(false);\n    const [deleteProjectChecked, setDeleteProjectChecked] = useState(false);\n\n    return(\n        <editContext.Provider value={{\n            addTaskChecked,\n            setAddTaskChecked,\n\n            showTaskDetails,\n            setShowTaskDetails,\n\n            editProjectChecked,\n            setEditProjectChecked,\n\n            setDeleteProjectChecked,\n            deleteProjectChecked\n        }}>\n            {children}\n        </editContext.Provider>\n    )\n}","import React, { createContext, useContext, useState } from 'react';\n\nexport const refreshProjectListContext = createContext();\n\nexport const useRefreshProjectListContext = () => useContext(refreshProjectListContext);\n\nexport function RefreshProjectListContextProvider({ children }) {\n\n    const [refreshProjectList, setRefreshProjectList] = useState(false);\n\n    return(\n        <refreshProjectListContext.Provider value={{\n            refreshProjectList,\n            setRefreshProjectList\n        }}>\n            {children}\n        </refreshProjectListContext.Provider>\n    )\n}","import { CLASS, ROLE } from \"../../../utils/enums\";\nimport { useEffect } from \"react\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useTasksContext } from \"../../../context/tasksContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useDisplayContext } from \"../../../context/displayContext\";\nimport { useEditContext } from \"../../../context/editContext\";\nimport { useRefreshProjectListContext } from \"../../../context/refreshProjectListContext\";\n\n/**\n * A component that lists all the projects in a sidebar.\n */\n\nfunction Projects () {\n    const { userData, token, userProjects, setUserProjects } = useUserContext();\n    const { setCurrentTask } = useTasksContext();\n    const { setCurrentProject } = useCurrentProjectContext();\n    const { refreshProjectList, setRefreshProjectList } = useRefreshProjectListContext();\n    const { setDisplayWelcome,\n        setDisplayProject,\n        setDisplayNewProject,\n        setDisplayDeletedMessage,\n        setDisplayEditUser,\n        setDisplayLogOut } = useDisplayContext();\n    const { setAddTaskChecked, setShowTaskDetails } = useEditContext();\n    const { requestUrl, projectsVisible, setProjectsVisible, setCurrentProjectRole } = useGeneralContext();\n\n    // gets all projects that user is involved in and refreshes when a project is added/removed\n    useEffect(()=>{\n        if(Object.keys(userData).length !== 0) {\n        fetch(`${requestUrl}/projects/${userData._id}`,{\n            method: 'GET',\n            headers: {'Content-Type': 'application/json', 'Authorization':`Bearer ${token}` }\n        })\n            .then(res => res.json())\n            .then(data => {\n                setUserProjects(data)\n            })\n            .then(() => setProjectsVisible(true))\n            .then(() => setRefreshProjectList(false))\n            .catch(e => console.log(e))\n        }\n    },[userData, refreshProjectList]);\n\n    const handleNewProject = ()=> {\n        setCurrentProjectRole(ROLE.admin)\n        setDisplayNewProject(true)\n        setDisplayProject(false)\n        setDisplayWelcome(false)\n        setDisplayDeletedMessage(false)\n        setAddTaskChecked(false)\n        setShowTaskDetails(false)\n        setCurrentTask('')\n        setDisplayEditUser(false)\n        setDisplayLogOut(false)\n    }\n\n    const handleViewProject = project => {\n        const usersInvolved = project.usersInvolved;\n        const rolesOfUser = [];\n        usersInvolved.forEach(user=>{\n            if (user.id === userData._id){\n                rolesOfUser.push(user.role)\n            }\n        })\n        setCurrentProjectRole(rolesOfUser)\n\n        setCurrentProject(project)\n\n        setDisplayNewProject(false)\n        setDisplayWelcome(false)\n        setAddTaskChecked(false)\n        setShowTaskDetails(false)\n        setCurrentTask('')\n        setDisplayProject(true)\n        setDisplayDeletedMessage(false)\n        setDisplayEditUser(false)\n        setDisplayLogOut(false)\n    }\n\n    return(\n        <>\n            <p className={CLASS.listTitle} onClick={()=>handleNewProject()}>+ add a new project</p>\n            <ul className={CLASS.list}>\n                { projectsVisible ?\n                    userProjects.map(project=>\n                        <li className={CLASS.listTitle}\n                            onClick={() => handleViewProject(project)}\n                        >{project.name}</li>):\n                    null }\n            </ul>\n        </>\n    )\n}\n\nexport default Projects;","import React, { createContext, useContext, useState } from 'react';\n\nexport const newProjectContext = createContext();\n\nexport const useNewProjectContext = () => useContext(newProjectContext);\n\nexport function NewProjectContextProvider({children}) {\n\n    const [adminID, setAdminID] = useState('');\n    const [projectManagerID, setProjectManagerID] = useState('');\n    const [developersIDs, setDevelopersIDs] = useState([]);\n    const [showTasks, setShowTasks] = useState(false);\n\n    return (\n        <newProjectContext.Provider value={\n            {\n                adminID,\n                setAdminID,\n                setProjectManagerID,\n                projectManagerID,\n                setDevelopersIDs,\n                developersIDs,\n                setShowTasks,\n                showTasks\n            }\n        }>\n            {children}\n        </newProjectContext.Provider>\n    )\n}","import { Accordion, Card } from \"react-bootstrap\";\nimport { CLASS } from \"../../../utils/enums\";\nimport Projects from \"./Projects\";\nimport { NewProjectContextProvider } from \"../../../context/newProjectContext\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { TasksContextProvider } from \"../../../context/tasksContext\";\nimport { EditContextProvider } from \"../../../context/editContext\";\n\n/**\n * Sidebar component, containing projects related to user\n */\n\nfunction SideBar() {\n\n    const { userData } = useUserContext();\n\n    return (\n        <NewProjectContextProvider>\n                <div className={CLASS.sideBar}>\n                    <p className={CLASS.sectionTitle}>Hello, {userData.name} {userData.surname}</p>\n                    <Accordion defaultActiveKey=\"0\">\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\" className={CLASS.subSectionTitle}>\n                                projects &#x25BF;\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <TasksContextProvider>\n                                        <EditContextProvider>\n                                        <Card.Body className={CLASS.cardBody}>\n                                            <Projects/>\n                                        </Card.Body>\n                                        </EditContextProvider>\n                                </TasksContextProvider>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                </div>\n        </NewProjectContextProvider>\n    )\n}\n\nexport default SideBar;","import { CLASS } from \"../../../utils/enums\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\n\n/**\n * A component that returns project details.\n */\n\nfunction ProjectDescription(){\n\n    const { currentProject} = useCurrentProjectContext();\n\n    return(\n        <>\n            <p className={CLASS.projectTitle}>{currentProject.name}</p>\n            <p className={CLASS.subtitleContent}>details: </p>\n            <p className={CLASS.elementsListed}>project code: <strong>{currentProject.code}</strong></p>\n            <p className={CLASS.subtitleContent}>team:</p>\n        </>\n    )\n}\n\nexport default ProjectDescription;","import React, {createContext, useContext, useEffect, useState} from 'react';\nimport {useUserContext} from \"./userContext\";\nimport {useGeneralContext} from \"./generalContext\";\n\nexport const allUsersContext = createContext();\n\nexport const useAllUsersContext = () => useContext(allUsersContext);\n\nexport function AllUsersContextProvider({children}) {\n\n    const [allUsers, setAllUsers] = useState([]);\n    const {token} = useUserContext()\n    const { requestUrl } = useGeneralContext();\n\n    useEffect(() => {\n        if(token !== ''){\n            fetch(`${requestUrl}/users`,{\n                method: 'GET',\n                headers: {'Content-Type': 'application/json', 'Authorization':`Bearer ${token}` }\n            })\n                .then(res=>res.json())\n                .then(data=>setAllUsers(data))\n                .catch(e=>console.log(e))\n        }\n    }, [token])\n\n    return(\n        <allUsersContext.Provider value={{\n            allUsers,\n            setAllUsers\n        }}>\n            {children}\n        </allUsersContext.Provider>\n    )\n}","import { CLASS } from \"../../../utils/enums\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useAllUsersContext } from \"../../../context/allUsersContext\";\n\n/**\n * A component that displays the users involved in a project.\n */\n\nfunction ProjectUsers(){\n\n    const { allUsers } = useAllUsersContext();\n    const { currentProject} = useCurrentProjectContext();\n    const users = currentProject.usersInvolved;\n\n    return(\n        <>\n            {\n                users.map(user => {\n                const userFound = allUsers.find(one => one._id === user.id)\n                return <p\n                    className={CLASS.elementsListed}> {user.role}: <strong>{userFound.name} {userFound.surname}</strong>\n                </p>\n            })\n            }\n        </>\n    )\n}\n\nexport default ProjectUsers;","import { Accordion, Card, ProgressBar } from \"react-bootstrap\";\nimport { CLASS, ROLE, VARIANTS } from \"../../../utils/enums\";\nimport { useTasksContext } from \"../../../context/tasksContext\";\nimport { useEditContext } from \"../../../context/editContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\n\n/**\n * A component that contains all the tasks related to the project.\n */\n\nfunction ProjectTasks(){\n    const { setCurrentTask } = useTasksContext();\n\n    const { addTaskChecked,\n        setAddTaskChecked,\n        setShowTaskDetails,\n        setEditProjectChecked,\n        setDeleteProjectChecked } = useEditContext();\n\n    const { tasksForCurrentProject } = useCurrentProjectContext();\n    const { currentProjectRole } = useGeneralContext();\n\n    let projectProgress = 0;\n\n    if(tasksForCurrentProject.length > 0){\n        let numberOfTasks = 0;\n        let currentTotal = 0;\n        tasksForCurrentProject.forEach(task => {\n            numberOfTasks += 1;\n            currentTotal += task.progress\n        })\n        projectProgress = Math.floor(currentTotal/numberOfTasks)\n    }\n\n    return (\n        <>\n            <p className={CLASS.subtitleContent}>progress: {projectProgress} %\n                <ProgressBar now={projectProgress} variant={VARIANTS.info}/>\n            </p>\n            <Accordion>\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\" className={CLASS.accordionTitle}>\n                        tasks... &#x25BF;\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body className={CLASS.cardBody}>\n                            {(currentProjectRole.includes(ROLE.admin) || currentProjectRole.includes(ROLE.projectManager)) ?\n                                <p className={CLASS.subTitleContentTasks}\n                                    onClick={() => {\n                                    setShowTaskDetails(false)\n                                    setEditProjectChecked(false)\n                                    setDeleteProjectChecked(false)\n                                    setAddTaskChecked(!addTaskChecked)}}>\n                                    <strong>+ add a new task</strong>\n                                </p> :\n                                null}\n                            {tasksForCurrentProject ?\n                                tasksForCurrentProject.map(task =>\n                                    <p className={CLASS.subTitleContentTasks} onClick={() => {\n                                        setCurrentTask(task)\n                                        setAddTaskChecked(false)\n                                        setEditProjectChecked(false)\n                                        setShowTaskDetails(true)\n                                        setDeleteProjectChecked(false)\n                                    }}>\n                                        {task.taskTitle}, {task.status}\n                                    </p>) :\n                                null}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n         </Accordion>\n        </>\n    )\n}\n\nexport default ProjectTasks;","import { useAllUsersContext } from \"../../../context/allUsersContext\";\n\n/**\n * Options for selecting one of the users.\n */\n\nfunction UsersSelect(){\n    const { allUsers } = useAllUsersContext();\n    return(\n    <>\n        <option>select user...</option>\n        { allUsers.map((user, key) =>\n            <option value={user._id} key={key}>{user.name} {user.surname}</option>) }\n    </>\n    )\n}\n\nexport default UsersSelect;","import { OPTION_VALUES } from \"../../../utils/enums\";\n\n/**\n * Options for status.\n */\n\nfunction StatusSelection (){\n    return(\n        <>\n            <option value={OPTION_VALUES.new}>new</option>\n            <option value={OPTION_VALUES.inProgress}>in progress</option>\n            <option value={OPTION_VALUES.finished}>finished</option>\n        </>\n    )\n}\n\nexport default StatusSelection;","import React, {useEffect, useRef} from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport { CLASS, PLACEHOLDER, VARIANTS } from \"../../../utils/enums\";\nimport { useState } from \"react\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport UsersSelect from \"../common/UsersSelect\";\nimport StatusSelection from \"../common/StatusSelection\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useEditContext } from \"../../../context/editContext\";\n\n/**\n * A component that returns a form to create a new task for a project.\n */\n\nfunction CreateTask(){\n\n    const [newTasksList, setNewTasksList] = useState([]);\n\n    let taskTitle = useRef('');\n    let description = useRef('');\n    let progress = useRef(0);\n\n    const [assignee, setAssignee] = useState('');\n    const [status, setStatus] = useState('new');\n    const [deadline, setDeadline] = useState('');\n\n    const { requestUrl } = useGeneralContext();\n    const { setAddTaskChecked } = useEditContext();\n    const { token } = useUserContext();\n    const { currentProject, setTasksForCurrentProject } = useCurrentProjectContext();\n\n    const [updateTasks, setUpdateTasks] = useState(false);\n    const [createdMessage, setCreatedMessage] = useState(false);\n\n    // adds a task to a list to be saved\n    const handleAddTask = ()=> {\n        setNewTasksList([...newTasksList,\n            {taskTitle: taskTitle.current.value,\n                assignee,\n                status,\n                deadline,\n                description: description.current.value,\n                progress: progress.current.value,\n                projectID:currentProject._id}\n        ])\n    }\n    // saves all the tasks to db\n    const handleSaveTasks = ()=> {\n        newTasksList.forEach(task=>{\n            fetch(`${requestUrl}/tasks`, {\n                method: 'POST',\n                headers:{'Content-Type': 'application/json', 'Authorization':`Bearer ${token}`},\n                body:JSON.stringify(task)\n            })\n                .then(res => res.json())\n                .then(() => setUpdateTasks(true))\n                .then(() => setAddTaskChecked(false))\n                .catch(e=>console.log(e))\n        })\n    }\n    // updates tasks for a project\n    useEffect(() => {\n        if(updateTasks){\n            fetch(`${requestUrl}/tasks/${currentProject._id}`, {\n                method: 'GET',\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`}\n            })\n                .then(res => res.json())\n                .then(data => setTasksForCurrentProject(data))\n                .then(() => setUpdateTasks(false))\n                .then(() => setCreatedMessage(true))\n                .catch(e => console.log(e))\n        }\n    }, [updateTasks])\n\n    return(\n        <fieldset className={CLASS.editSection}>\n            <Form.Group>\n                <Col sm={12}>\n                    <Form.Group as={Row} controlId=\"formGridTitle\" >\n                        <Col sm={6}>\n                            <Form.Label as=\"legend\"\n                                        className={CLASS.subsectionTitle}>\n                                task title\n                                <Form.Control required\n                                              size=\"sm\"\n                                              type=\"text\"\n                                              placeholder={PLACEHOLDER.enterTitle}\n                                              ref={taskTitle}/>\n                            </Form.Label>\n                            <Form.Label as=\"legend\"\n                                        className={CLASS.subsectionTitle}>\n                                deadline\n                                <Form.Control type=\"date\"\n                                              size=\"sm\"\n                                              onChange={e => setDeadline(e.target.value)}>\n                                </Form.Control>\n                            </Form.Label>\n                            <Form.Label as=\"legend\"\n                                        className={CLASS.subsectionTitle}>\n                                description\n                                <Form.Control size=\"sm\"\n                                              type=\"textarea\"\n                                              placeholder={PLACEHOLDER.description}\n                                              ref={description}>\n                                </Form.Control>\n                            </Form.Label>\n                            </Col>\n                        <Col sm={5}>\n                            <Form.Label as=\"legend\"\n                                        className={CLASS.subsectionTitle}>\n                                assignee\n                                <Form.Control size=\"sm\"\n                                              as=\"select\"\n                                              value={assignee}\n                                              onChange={e=>setAssignee(e.target.value)}>\n                                    <UsersSelect/>\n                                </Form.Control>\n                            </Form.Label>\n                            <Form.Label as=\"legend\"\n                                        className={CLASS.subsectionTitle}>\n                                status\n                                <Form.Control as=\"select\"\n                                              size=\"sm\"\n                                              defaultValue=\"new\"\n                                              onChange={e => setStatus(e.target.value)}>\n                                    <StatusSelection/>\n                                </Form.Control>\n                            </Form.Label>\n                            <Form.Label as=\"legend\"\n                                        className={CLASS.subsectionTitle}>\n                                progress %\n                                <Form.Control type=\"number\"\n                                              placeholder=\"0\"\n                                              sm={2}\n                                              size=\"sm\"\n                                              ref={progress}/>\n                            </Form.Label>\n                        </Col>\n                    </Form.Group>\n                    <Col sm={11}>\n                        <Form.Label as=\"legend\"  className={CLASS.subsectionTitle}>\n                            {(description !== '' && taskTitle !== '' && assignee !== '' && deadline !=='') ?\n                                <Button variant={VARIANTS.info}\n                                        onClick={() => handleAddTask()}>\n                                    add a task\n                                </Button>:\n                                <Button variant={VARIANTS.light}\n                                        disabled>\n                                    please fill in all fields to add a task\n                                </Button>\n                            }\n                        </Form.Label>\n                    </Col>\n                    <Col sm={11}>\n                        <Form.Label as=\"legend\"\n                                    className={CLASS.subsectionTitle}>\n                            list of tasks\n                            <Form.Control as=\"select\"\n                                          size=\"sm\"\n                                          multiple>\n                                {newTasksList.map(task => <option>{task.taskTitle}, {task.status}</option>)}\n                            </Form.Control>\n                        </Form.Label>\n                        {newTasksList.length !==0 ?\n                            <Button variant={VARIANTS.info}\n                                    onClick={() => handleSaveTasks()}>save all tasks</Button> :\n                            null\n                        }\n                        {createdMessage?\n                            <p>\n                                tasks saved!\n                            </p>\n                            :null}\n                    </Col>\n                </Col>\n            </Form.Group>\n        </fieldset>\n    )\n}\n\nexport default CreateTask;","import { useAllUsersContext } from \"../../../context/allUsersContext\";\n\n/**\n * Options for selecting users.\n */\n\nfunction UsersMultiple(){\n    const { allUsers } = useAllUsersContext();\n    return(\n        <>\n            {allUsers.map((user, key)=><option value={user._id} key={key}>{user.name} {user.surname}</option>)}\n        </>\n    )\n}\n\nexport default UsersMultiple;","import {CLASS, ROLE, VARIANTS} from \"../../../utils/enums\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport UsersSelect from \"../common/UsersSelect\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport { useEffect, useRef, useState } from \"react\";\nimport UsersMultiple from \"../common/UsersMultiple\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useRefreshProjectListContext } from \"../../../context/refreshProjectListContext\";\n\n/**\n * Returns a form to edit a project.\n */\n\nfunction EditProject() {\n    const { requestUrl } = useGeneralContext();\n    const { currentProject, setCurrentProject } = useCurrentProjectContext();\n    const { token } = useUserContext();\n    const { setRefreshProjectList } = useRefreshProjectListContext();\n\n    const [newAdminID, setNewAdminID] = useState('');\n    const [newProjectManagerID, setNewProjectManagerID] = useState('');\n    const [newDevelopersIDs, setNewDevelopersIDs] = useState([]);\n\n    let newProjectTitle = useRef(currentProject.name);\n    let newProjectCode = useRef(currentProject.code);\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n    const [updatedInput, setUpdatedInput] = useState({})\n\n    const handleSelect = (selectedItems)=> {\n        const devsIDs = [];\n        for (let i=0; i<selectedItems.length; i++) {\n            devsIDs.push(selectedItems[i].value);\n        }\n        setNewDevelopersIDs(devsIDs)\n    }\n    const handleSubmit = () => {\n        const developers = []\n        newDevelopersIDs.forEach(dev=>developers.push({id:dev, role: ROLE.developer}))\n\n        setUpdatedInput({\n            name:newProjectTitle.current.value,\n            code: newProjectCode.current.value,\n            usersInvolved:[\n                {id:newAdminID,\n                role: ROLE.admin},\n                {id:newProjectManagerID,\n                role: ROLE.projectManager},\n                ...developers\n        ]})\n        setShouldFetch(true)\n    }\n\n    useEffect(()=>{\n        if(shouldFetch){\n        fetch(`${requestUrl}/projects/${currentProject._id}`, {\n            method: 'PATCH',\n            headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n            body: JSON.stringify(updatedInput)\n        })\n            .then(res=>res.json())\n            .then(data=>setCurrentProject(data))\n            .then(()=>setShouldFetch(false))\n            .then(()=>setRefreshProjectList(true))\n            .catch(e=>console.log(e))\n        }\n    },[shouldFetch]);\n\n    return(\n        <div className={CLASS.editSection}>\n            <Form.Group>\n                <Col sm={12}>\n                    <Form.Group as={Row}>\n                        <Col sm={10}>\n                            <span className={CLASS.subtitleContent}>project title:</span>\n                            <Form.Control size='sm'\n                                          as='input'\n                                          placeholder={currentProject.name}\n                                          ref={newProjectTitle}>\n                            </Form.Control>\n\n                            <span className={CLASS.subtitleContent}>project code:</span>\n                            <Form.Control size='sm'\n                                          as='input'\n                                          placeholder={currentProject.code}\n                                          ref={newProjectCode}>\n                            </Form.Control>\n\n                            <span className={CLASS.subtitleContent}>admin:</span>\n                            <Form.Control size=\"sm\"\n                                          as=\"select\"\n                                          value={newAdminID}\n                                          onChange={e=>setNewAdminID(e.target.value)}>\n                                <UsersSelect/>\n                            </Form.Control>\n\n                            <span className={CLASS.subtitleContent}>project manager:</span>\n                            <Form.Control size=\"sm\"\n                                          as=\"select\"\n                                          value={newProjectManagerID}\n                                          onChange={e=>setNewProjectManagerID(e.target.value)}>\n                                <UsersSelect/>\n                            </Form.Control>\n\n                            <span className={CLASS.subtitleContent}>developers:</span>\n                            <Form.Control as=\"select\"\n                                          multiple\n                                          value={newDevelopersIDs}\n                                          onChange={e=> {handleSelect(e.target.selectedOptions)}}>\n                                <UsersMultiple/>\n                            </Form.Control>\n\n                        </Col>\n                    </Form.Group>\n                    {(newAdminID !== '' && newProjectManagerID !=='' && newDevelopersIDs.length !==0)?\n                        <Button variant={VARIANTS.info}\n                             onClick={() => handleSubmit()}>save changes</Button>:\n                        <Button variant={VARIANTS.info} disabled>please fill in all fields</Button>\n                    }\n                </Col>\n            </Form.Group>\n        </div>\n    )\n}\n\nexport default EditProject;","import {CLASS, ROLE, VARIANTS} from \"../../../utils/enums\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport UsersSelect from \"../common/UsersSelect\";\nimport StatusSelection from \"../common/StatusSelection\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useTasksContext } from \"../../../context/tasksContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useAllUsersContext } from \"../../../context/allUsersContext\";\n\n/**\n * Returns a form to edit a task.\n */\n\nfunction EditTask(){\n    const { requestUrl, currentProjectRole } = useGeneralContext();\n    const { currentTask } = useTasksContext();\n    const { token } = useUserContext();\n    const { currentProject, setTasksForCurrentProject } = useCurrentProjectContext();\n    const { allUsers } = useAllUsersContext();\n\n    let newTaskTitle = useRef(currentTask.taskTitle);\n    let newDescription = useRef(currentTask.description);\n    let newProgress = useRef(currentTask.progress);\n\n    const [newTaskStatus, setNewTaskStatus] = useState(currentTask.status);\n    const [newTaskAssignee, setNewTaskAssignee] = useState(currentTask.assignee);\n    const [newDeadline, setNewDeadline] = useState(currentTask.deadline);\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n    const [updateTasks, setUpdateTasks] = useState(false);\n    const [updatedMessage, setUpdatedMessage] = useState(false);\n\n    const currentAssignee = allUsers.find(one=> one._id === currentTask.assignee)\n\n    // updates tasks for a project\n    useEffect(() => {\n        if(updateTasks){\n            fetch(`${requestUrl}/tasks/${currentProject._id}`, {\n                method: 'GET',\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`}\n            })\n                .then(res => res.json())\n                .then(data => setTasksForCurrentProject(data))\n                .then(() => setUpdateTasks(false))\n                .then(() => setUpdatedMessage(true))\n                .catch(e => console.log(e))\n        }\n    }, [updateTasks])\n\n    // modifies the task\n    useEffect(()=>{\n        if(shouldFetch){\n            const newTaskData = {\n                taskTitle: newTaskTitle.current.value,\n                assignee: newTaskAssignee,\n                status: newTaskStatus,\n                progress: newProgress.current.value,\n                deadline: newDeadline,\n                description: newDescription.current.value\n            }\n            fetch(`${requestUrl}/tasks/${currentTask._id}`,{\n                method: 'PATCH',\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n                body:JSON.stringify(newTaskData)\n            })\n                .then(res=>res.json())\n                .then(data=>console.log(data))\n                .then(()=>setUpdateTasks(true))\n                .catch(e=>console.log(e))\n        }\n    }, [shouldFetch])\n\n    return(\n            <div className={CLASS.editSection}>\n                <p className={CLASS.subtitleContent}>title:\n                {(currentProjectRole.includes(ROLE.admin)||currentProjectRole.includes(ROLE.projectManager))?\n                        <Form.Control size='sm'\n                                   as='input'\n                                   placeholder={currentTask.taskTitle}\n                                   ref={newTaskTitle}/>\n                       :\n                    <p className={CLASS.subtitleContent}>\n                        {currentTask.taskTitle}\n                    </p>\n                }\n                </p>\n\n                <p className={CLASS.subtitleContent}>status:\n                    <Form.Control as=\"select\"\n                                  size=\"sm\"\n                                  defaultValue=\"new\"\n                                  onChange={e=>setNewTaskStatus(e.target.value)}>\n                        <StatusSelection/>\n                    </Form.Control>\n                </p>\n\n                <p className={CLASS.subtitleContent}>assignee:\n                    {(currentProjectRole.includes(ROLE.admin)||currentProjectRole.includes(ROLE.projectManager))?\n                        <Form.Control size=\"sm\"\n                                   as=\"select\"\n                                   onChange={e => setNewTaskAssignee(e.target.value)}>\n                        <UsersSelect/>\n                    </Form.Control> :\n                        <p className={CLASS.subtitleContent}>\n                            {currentAssignee.name} {currentAssignee.surname}\n                        </p>}\n                </p>\n\n                <p className={CLASS.subtitleContent}>deadline:\n                    {\n                        (currentProjectRole.includes(ROLE.admin)||currentProjectRole.includes(ROLE.projectManager))?\n                            <Form.Control type=\"date\"\n                                          size=\"sm\"\n                                          onChange={e=>setNewDeadline(e.target.value)}/>:\n                            <p className={CLASS.subtitleContent}>\n                                {newDeadline.split('T')[0]}\n                            </p>\n                    }\n\n                </p>\n\n                <p className={CLASS.subtitleContent}>description:\n                    <Form.Control size='sm'\n                                  as='input'\n                                  placeholder={currentTask.description}\n                                  ref={newDescription}/>\n                </p>\n\n                <p className={CLASS.subtitleContent}>progress:\n                    <Form.Control type=\"number\"\n                                  placeholder={currentTask.progress}\n                                  ref={newProgress}\n                                  sm={2} size=\"sm\"/>\n                </p>\n                <p className={CLASS.subtitleContent}>\n                    {updatedMessage?\n                        <p className={CLASS.subtitleContent}>\n                            task updated!\n                        </p>:\n                        <Button variant={VARIANTS.outlineInfo}\n                             onClick={() => {\n                                 setShouldFetch(true)\n                             }}>\n                        save changes\n                    </Button>}\n                </p>\n            </div>\n    )\n}\n\nexport default EditTask;","import { Button } from \"react-bootstrap\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useEffect, useState } from \"react\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useTasksContext } from \"../../../context/tasksContext\";\nimport {useCurrentProjectContext} from \"../../../context/currentProjectContext\";\nimport { CLASS, VARIANTS } from \"../../../utils/enums\";\n\n/**\n * Returns options to remove a task.\n */\n\nfunction DeleteTask(){\n    const { requestUrl } = useGeneralContext();\n    const { currentTask } = useTasksContext();\n    const { token } = useUserContext();\n    const { currentProject, setTasksForCurrentProject } = useCurrentProjectContext();\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n    const [updateTasks, setUpdateTasks] = useState(false);\n    const [deletedMessage, setDeletedMessage] = useState(false);\n\n    // updates tasks for a project\n    useEffect(() => {\n        if(updateTasks){\n            fetch(`${requestUrl}/tasks/${currentProject._id}`, {\n                method: 'GET',\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`}\n            })\n                .then(res => res.json())\n                .then(data => setTasksForCurrentProject(data))\n                .then(() => setUpdateTasks(false))\n                .then(() => setDeletedMessage(true))\n                .catch(e => console.log(e))\n        }\n    }, [updateTasks])\n\n    // removes the task\n    useEffect(()=>{\n        if(shouldFetch){\n            fetch(`${requestUrl}/tasks/${currentTask._id}`,{\n                method: 'DELETE',\n                headers:{'Content-Type': 'application/json', 'Authorization':`Bearer ${token}`}\n            })\n                .then(res=>res.json())\n                .then(() => setUpdateTasks(true))\n                .catch(e=>console.log(e))\n        }\n    }, [shouldFetch])\n    return(\n        <>\n            {deletedMessage ? <p className={CLASS.welcomeMessage}>task deleted!</p>:\n                <>\n                    <p>\n                        Are you sure you want to delete \"{currentTask.taskTitle}\"?\n                    </p>\n                    <Button variant={VARIANTS.outlineInfo}\n                    onClick={()=>setShouldFetch(true)}>yes</Button>\n                </>\n            }\n        </>\n    )\n}\n\nexport default DeleteTask;","import { CLASS, VARIANTS } from \"../../../utils/enums\";\nimport { Button, ProgressBar } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport EditTask from \"./EditTask\";\nimport DeleteTask from \"./DeleteTask\";\nimport { useTasksContext } from \"../../../context/tasksContext\";\nimport { useEditContext } from \"../../../context/editContext\";\nimport { useAllUsersContext } from \"../../../context/allUsersContext\";\n\n/**\n * A component that displays task section.\n */\n\nfunction TaskSection() {\n    const { setShowTaskDetails } = useEditContext();\n    const { currentTask } = useTasksContext();\n\n    const [editTaskVisible, setEditTaskVisible] = useState(false);\n    const [deleteTaskVisible, setDeleteTaskVisible] = useState(false);\n    const { allUsers } = useAllUsersContext();\n\n    const currentAssignee = allUsers.find(one=> one._id === currentTask.assignee)\n\n    return (\n        <>\n            <Button variant={VARIANTS.outlineDanger}\n                    className={CLASS.cancelButton}\n                    onClick={() => setShowTaskDetails(false)}>x</Button>\n            { editTaskVisible ?\n                <>\n                    <EditTask/>\n                    <p className={CLASS.subtitleContent}>\n                        <Button variant={VARIANTS.outlineDanger} onClick={() => setEditTaskVisible(false)}>cancel</Button>\n                    </p>\n                </>\n                :\n                <>\n                    <div className={CLASS.editSection}>\n                        <p className={CLASS.projectTitle}>{currentTask.taskTitle}</p>\n                        <p className={CLASS.subtitleContent}>status: <strong>{currentTask.status}</strong></p>\n                        <p className={CLASS.subtitleContent}>assignee: <strong>{currentAssignee.name} {currentAssignee.surname}</strong></p>\n                        <p className={CLASS.subtitleContent}>deadline: <strong>{currentTask.deadline.split('T')[0]}</strong>\n                        </p>\n                        <p className={CLASS.subtitleContent}>description: <strong>{currentTask.description}</strong></p>\n                        <p className={CLASS.subtitleContent}>progress:\n                            <ProgressBar now={currentTask.progress}\n                                         label={`${currentTask.progress}%`}\n                                         variant={VARIANTS.success} sm={2}/>\n                        </p>\n                        <p className={CLASS.subtitleContent}>\n                            <Button variant={VARIANTS.outlineInfo}\n                                    onClick={() => setEditTaskVisible(true)}>\n                                edit\n                            </Button>\n                            <Button variant={VARIANTS.outlineDanger}\n                                    onClick={() => setDeleteTaskVisible(!deleteTaskVisible)}>\n                                delete task\n                            </Button>\n                        </p>\n                        { deleteTaskVisible ?\n                            <p className={CLASS.subtitleContent}>\n                                <DeleteTask/>\n                                <Button  variant={VARIANTS.outlineDanger}\n                                         onClick={()=>setDeleteTaskVisible(false)}>\n                                    close\n                                </Button>\n                            </p>\n                        :null}\n                    </div>\n                </>}\n        </>\n\n    )\n}\n\nexport default TaskSection;","import {CLASS, VARIANTS} from \"../../../utils/enums\";\nimport { Button } from \"react-bootstrap\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useEffect, useState } from \"react\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useEditContext } from \"../../../context/editContext\";\nimport { useDisplayContext } from \"../../../context/displayContext\";\nimport { useRefreshProjectListContext } from \"../../../context/refreshProjectListContext\";\n\n/**\n * Returns options to remove a project.\n */\n\nfunction DeleteProject () {\n    const { requestUrl } = useGeneralContext();\n    const { deleteProjectChecked, setDeleteProjectChecked } = useEditContext();\n    const { token } = useUserContext();\n    const { currentProject } = useCurrentProjectContext();\n    const { setDisplayDeletedMessage, setDisplayProject } = useDisplayContext();\n    const { setRefreshProjectList } = useRefreshProjectListContext();\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n\n    // removes the project\n    useEffect(() => {\n        if (shouldFetch) {\n            fetch(`${requestUrl}/projects/${currentProject._id}`, {\n                method: 'DELETE',\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`}\n            })\n                .then(res => res.json())\n                .then(() => {\n                    setDisplayProject(false)\n                })\n                .then(()=>setRefreshProjectList(true))\n                .then(()=>setDeleteProjectChecked(false))\n                .catch(e => console.log(e))\n        }\n    }, [shouldFetch])\n\n    return (\n        <>\n            <p className={CLASS.subtitleContent}>Are you sure you want to delete the \"{currentProject.name}\"\n                project?</p>\n            <Button className={CLASS.subtitleContent}\n                    variant={VARIANTS.outlineInfo}\n                    onClick={() => {\n                        setShouldFetch(true)\n                        setDisplayDeletedMessage(true)\n                    }}\n            >yes</Button>\n            <Button className={CLASS.subtitleContent}\n                    variant={VARIANTS.outlineDanger}\n                    onClick={() => setDeleteProjectChecked(!deleteProjectChecked)}\n            >cancel</Button>\n        </>\n    )\n}\n\nexport default DeleteProject;","import {CLASS, VARIANTS} from \"../../../utils/enums\";\nimport { Button } from \"react-bootstrap\";\nimport CreateTask from \"../ProjectSection/CreateTask\";\nimport EditProject from \"../ProjectSection/EditProject\";\nimport TaskSection from \"../ProjectSection/TaskSection\";\nimport DeleteProject from \"../ProjectSection/DeleteProject\";\nimport { useEditContext } from \"../../../context/editContext\";\n\n/**\n * A component that returns editing section.\n */\n\nfunction EditSection(){\n\n    const { addTaskChecked,\n        setAddTaskChecked,\n        showTaskDetails,\n        editProjectChecked,\n        setEditProjectChecked,\n        deleteProjectChecked} = useEditContext();\n\n    return(\n        <>\n            {(addTaskChecked || editProjectChecked || showTaskDetails || deleteProjectChecked) ?\n\n                <div className={CLASS.rightProjectDivision}>\n                    {addTaskChecked ?\n                        <>\n                            <Button className={CLASS.cancelButton} variant={VARIANTS.outlineDanger}\n                                    onClick={() => setAddTaskChecked(!addTaskChecked)}>x</Button>\n                            <CreateTask/>\n                        </> :\n                        null}\n                    {editProjectChecked ?\n                        <>\n                            <Button className={CLASS.cancelButton} variant={VARIANTS.outlineDanger}\n                                    onClick={() => setEditProjectChecked(!editProjectChecked)}>x</Button>\n                            <EditProject/>\n                        </> :\n                        null}\n                    {showTaskDetails ? <TaskSection/> : null}\n                    {deleteProjectChecked ? <DeleteProject/> : null}\n                </div> :\n                null}\n        </>\n    )\n}\n\nexport default EditSection;","import {CLASS, ROLE, VARIANTS} from \"../../../utils/enums\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useEditContext } from \"../../../context/editContext\";\nimport ProjectDescription from \"./ProjectDescription\";\nimport ProjectUsers from \"./ProjectUsers\";\nimport ProjectTasks from \"./ProjectTasks\";\nimport EditSection from \"../EditSection/EditSection\";\n\n/**\n * A component that displays project section.\n */\n\nfunction ProjectSection() {\n\n    const { token } = useUserContext();\n    const { currentProject, setTasksForCurrentProject } = useCurrentProjectContext();\n    const { requestUrl, currentProjectRole } = useGeneralContext();\n    const { setAddTaskChecked,\n        setShowTaskDetails,\n        editProjectChecked,\n        setEditProjectChecked,\n        setDeleteProjectChecked,\n        deleteProjectChecked} = useEditContext();\n\n    // get tasks for a project\n    useEffect(() => {\n        fetch(`${requestUrl}/tasks/${currentProject._id}`, {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`}\n        })\n            .then(res => res.json())\n            .then(data => setTasksForCurrentProject(data))\n            .catch(e => console.log(e))\n    }, [currentProject])\n\n    return (\n        <div className={CLASS.projectSection}>\n            <div className={CLASS.leftProjectDivision}>\n                <ProjectDescription/>\n                <ProjectUsers/>\n                <ProjectTasks/>\n                {(currentProjectRole.includes(ROLE.admin) || currentProjectRole.includes(ROLE.projectManager))?\n                    <Button className={CLASS.subtitleContent} variant={VARIANTS.outlineInfo}\n                            onClick={() => {\n                                setEditProjectChecked(!editProjectChecked)\n                                setAddTaskChecked(false)\n                                setShowTaskDetails(false)\n                                setDeleteProjectChecked(false)\n                            }}>edit</Button>:\n                    null}\n                {currentProjectRole.includes(ROLE.admin) ?\n                    <Button className={CLASS.subtitleContent} variant={VARIANTS.outlineInfo}\n                            onClick={() => {\n                                setAddTaskChecked(false)\n                                setShowTaskDetails(false)\n                                setEditProjectChecked(false)\n                                setDeleteProjectChecked(!deleteProjectChecked)\n                            }}>delete project</Button>\n                    :null}\n            </div>\n            <EditSection/>\n        </div>\n    )\n}\n\nexport default ProjectSection;","import { CLASS, ROLE, VARIANTS } from \"../../../utils/enums\";\nimport { Button } from \"react-bootstrap\";\nimport { useUserContext } from \"../../../context/userContext\";\n\n/**\n * A component that returns welcome screen.\n */\n\nfunction Welcome() {\n\n    const { userData } = useUserContext();\n\n    return(\n        <div className={CLASS.welcome}>\n            <p className={CLASS.sectionTitle}>Welcome, {userData.name}!</p>\n            <p className={CLASS.subtitleContent}>choose a project from the sidebar to see the details</p>\n            { userData.role === ROLE.admin?\n                <>\n                    <p className={CLASS.subtitleContent}>or create a new project</p>\n                    <Button variant={VARIANTS.info}\n                            className={CLASS.smallButton}>\n                        +\n                    </Button>\n                </>\n                :null\n            }\n        </div>\n    )\n}\n\nexport default Welcome;","import { Col, Form, Row } from \"react-bootstrap\";\nimport { CLASS } from \"../../../utils/enums\";\nimport UsersMultiple from \"../common/UsersMultiple\";\nimport UsersSelect from \"../common/UsersSelect\";\nimport { useNewProjectContext } from \"../../../context/newProjectContext\";\n\n/**\n * A component that returns a form to create a team.\n */\n\nfunction CreateTeam () {\n    // in context because it is shared with other components\n    const { adminID,\n        setAdminID,\n        projectManagerID,\n        setProjectManagerID,\n        developersIDs,\n        setDevelopersIDs} = useNewProjectContext();\n\n    const handleSelect = (selectedItems)=> {\n        const devsIDs = [];\n        for (let i=0; i<selectedItems.length; i++) {\n            devsIDs.push(selectedItems[i].value);\n        }\n        setDevelopersIDs(devsIDs)\n    }\n    return(\n            <Form.Group>\n                <Col sm={10}>\n                    <Form.Group as={Row}\n                                controlId=\"formGridAdmin\"\n                                sm={4}>\n                        <Col sm={4}>\n                            <p className={CLASS.subtitleContent}>\n                                admin\n                            </p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control size=\"sm\"\n                                          as=\"select\"\n                                          value={adminID}\n                                          onChange={e=>setAdminID(e.target.value)}>\n                                <UsersSelect/>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row}\n                                controlId=\"formGridPM\"\n                                sm={4}>\n                        <Col sm={4}>\n                            <p className={CLASS.subtitleContent}>\n                                project manager\n                            </p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control size=\"sm\"\n                                          as=\"select\"\n                                          value={projectManagerID}\n                                          onChange={e => setProjectManagerID(e.target.value)}>\n                                <UsersSelect/>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row}\n                                controlId=\"exampleForm.Developers\"\n                                sm={4}>\n                        <Col sm={4}>\n                            <p className={CLASS.subtitleContent}>\n                                developers\n                            </p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control as=\"select\"\n                                          multiple\n                                          value={developersIDs}\n                                          onChange={e=> {handleSelect(e.target.selectedOptions)}}>\n                                <UsersMultiple/>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n                </Col>\n            </Form.Group>\n    )\n}\n\nexport default CreateTeam;","import React, { useRef } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport CreateTeam from \"../ProjectSection/CreateTeam\";\nimport {CLASS, ROLE} from \"../../../utils/enums\";\nimport { useEffect,  useState } from \"react\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useNewProjectContext } from \"../../../context/newProjectContext\";\nimport { useAllUsersContext } from \"../../../context/allUsersContext\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useCurrentProjectContext } from \"../../../context/currentProjectContext\";\nimport { useRefreshProjectListContext } from \"../../../context/refreshProjectListContext\";\n\n/**\n * A component that returns a section to create a new project.\n */\n\nfunction CreateNewProject() {\n\n    const { requestUrl, setProjectsVisible } = useGeneralContext();\n    const { setCurrentProject } = useCurrentProjectContext();\n    const { allUsers } = useAllUsersContext();\n    const { token } = useUserContext();\n    const { adminID, projectManagerID, developersIDs, setShowTasks } = useNewProjectContext();\n    const { setRefreshProjectList } = useRefreshProjectListContext();\n\n    const [fetchProject, setFetchProject] = useState(false);\n\n    let projectTitle = useRef('');\n    let projectCode = useRef('');\n    let inputProject = {};\n\n    useEffect(() => {\n        if (fetchProject) {\n            const developersSet = []\n            for (let i = 0; i < developersIDs.length; i++) {\n                const dev = allUsers.filter(user => user._id === developersIDs[i])[0]\n                const completeDev = { \"id\":dev._id, \"role\": ROLE.developer}\n                developersSet.push(completeDev)\n            }\n            inputProject = {\n                \"name\": projectTitle.current.value,\n                \"code\": projectCode.current.value,\n                \"usersInvolved\":\n                    [{\"id\":adminID, \"role\": ROLE.admin},\n                        {\"id\":projectManagerID, \"role\": ROLE.projectManager},\n                        ...developersSet\n                    ]\n            }\n            fetch(`${requestUrl}/projects`, {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n                body: JSON.stringify(inputProject)\n            })\n                .then(res => res.json())\n                .then(data => {\n                    setCurrentProject(data)\n                })\n                .then(() => {\n                    setFetchProject(false)\n                    setShowTasks(true)\n                    setProjectsVisible(true)\n                })\n                .then(()=>setRefreshProjectList(true))\n                .catch(e => console.log(e))\n        }\n    }, [fetchProject])\n\n    return (\n        <Form>\n            <Form.Label as=\"legend\" column sm={10} className={CLASS.projectTitle}>\n                create new project\n            </Form.Label>\n                <Form.Group>\n                    <Form.Label as=\"legend\" column sm={10} className={CLASS.subtitleContent}>\n                        project details\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Group as={Row} controlId=\"formGridTitle\" >\n                            <Col sm={4}>\n                                <p  className={CLASS.subtitleContent}>project title</p>\n                            </Col>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" ref={projectTitle}/>\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} controlId=\"formGridAdmin\" sm={4}>\n                            <Col sm={4}>\n                                <p  className={CLASS.subtitleContent}>project code</p>\n                            </Col>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" ref={projectCode}/>\n                            </Col>\n                         </Form.Group>\n                    </Col>\n                </Form.Group>\n                <CreateTeam/>\n                <Form.Group as={Row}>\n                    <Col sm={{span: 10}}>\n                        { (inputProject.name !== '' &&\n                            inputProject.code !== '' &&\n                            adminID !== '' &&\n                            projectManagerID!=='' &&\n                            developersIDs.length !==0 ) ?\n                            <Button type=\"submit\"\n                                    className={CLASS.saveButton}\n                                    variant=\"info\"\n                                    onClick={e => {\n                                        e.preventDefault()\n                                        setFetchProject(true)\n                                    }}\n                            >Save project</Button> :\n                            <p className={CLASS.fillInAllMessage}>\n                                please fill in all form fields in order to save the project\n                            </p>}\n                    </Col>\n                </Form.Group>\n        </Form>\n    )\n}\nexport default CreateNewProject;","import { CLASS } from \"../../../utils/enums\";\n\n/**\n * Displays a message that the project is deleted.\n */\n\nfunction DeletedMessage(){\n    return(\n        <div className={CLASS.welcome}>\n            <p className={CLASS.sectionTitle}>Project is deleted!</p>\n        </div>\n    )\n}\n\nexport default DeletedMessage;","import {BUTTON_TYPES, CLASS, CONTROL_ID, ERRORS, FORM_TYPES, VALIDATE, VARIANTS} from \"../../../utils/enums\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\nimport { useUserContext } from \"../../../context/userContext\";\nimport { useFormik } from 'formik';\nimport { useGeneralContext } from \"../../../context/generalContext\";\n\n/**\n * A component that returns a section for user editing.\n */\n\nconst validate = values => {\n    const errors = {};\n\n    if (!values.password) {\n        errors.password = VALIDATE.required;\n    } else if(values.password.length < 8){\n        errors.password = ERRORS.eightCharacters;\n    } else if(!/[A-Z]/.test(values.password)){\n        errors.password = ERRORS.uppercase;\n    } else if(!/[a-z]/.test(values.password)){\n        errors.password = ERRORS.lowercase;\n    } else if(!/[0-9]/.test(values.password)){\n        errors.password = ERRORS.number;\n    } else if(!/[@#$^+=!]/.test(values.password)){\n        errors.password = ERRORS.specialChar;\n    }\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = ERRORS.invalidEmail;\n    }\n    return errors;\n};\n\nfunction EditUser(){\n    const { requestUrl } = useGeneralContext();\n    const { userData, token, setUserData } = useUserContext();\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n    const [inputUserData, setInputUserData] = useState({});\n    const [displaySuccessMessage, setDisplaySuccessMessage] = useState(false);\n\n    const formik = useFormik({\n        validateOnBlur:false,\n        initialValues: {\n            email:userData.email,\n            password: '',\n            surname:userData.surname,\n            name:userData.name,\n            username:userData.username\n        },\n        validate,\n        onSubmit: values => {\n            setInputUserData(values)\n            setShouldFetch(true)\n        },\n    });\n    const submitHandler = async(event) => {\n        event.preventDefault();\n        formik.handleSubmit(event);\n    }\n    useEffect(()=>{\n        if(shouldFetch) {\n            fetch(`${requestUrl}/users/${userData._id}`, {\n                method: 'PATCH',\n                headers: {'Content-Type': 'application/json','Authorization': `Bearer ${token}` },\n                body: JSON.stringify(inputUserData)}\n            )\n                .then(res=>res.json())\n                .then(data=>setUserData(data))\n                .then(()=>setDisplaySuccessMessage(true))\n                .catch(e=>console.log(e))\n        }\n    },[shouldFetch])\n\n    return(\n        <Form onSubmit={formik.handleSubmit}>\n            <Form.Label as=\"legend\" column sm={10} className={CLASS.projectTitle}>\n                edit user data\n            </Form.Label>\n            <Form.Group>\n                <Form.Label as=\"legend\" column sm={10} className={CLASS.subtitleContent}>\n                    user details\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Group as={Row} controlId={CONTROL_ID.formUsername} sm={4}>\n                        <Col sm={4}>\n                            <p  className={CLASS.subtitleContent}>username</p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control placeholder={userData.username}\n                                          type={FORM_TYPES.username}\n                                          data-testid=\"required-input-edit-username\"\n                                          name={FORM_TYPES.username}\n                                          onChange={formik.handleChange}\n                                          value={formik.values.username}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId={CONTROL_ID.formName}>\n                        <Col sm={4}>\n                            <p  className={CLASS.subtitleContent}>name</p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control type={FORM_TYPES.name}\n                                          placeholder={FORM_TYPES.name}\n                                          data-testid=\"required-input-edit-name\"\n                                          name={FORM_TYPES.name}\n                                          onChange={formik.handleChange}\n                                          value={formik.values.name}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId={CONTROL_ID.formSurname} sm={4}>\n                        <Col sm={4}>\n                            <p  className={CLASS.subtitleContent}>surname</p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control type={FORM_TYPES.surname}\n                                          placeholder={FORM_TYPES.surname}\n                                          data-testid=\"required-input-edit-surname\"\n                                          name={FORM_TYPES.surname}\n                                          onChange={formik.handleChange}\n                                          value={formik.values.surname}/>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId={CONTROL_ID.formEmail} sm={4}>\n                        <Col sm={4}>\n                            <p  className={CLASS.subtitleContent}>email</p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control type={FORM_TYPES.email}\n                                          placeholder={FORM_TYPES.email}\n                                          data-testid=\"required-input-edit-email\"\n                                          name={FORM_TYPES.email}\n                                          onChange={formik.handleChange}\n                                          value={formik.values.email}/>\n                            { formik.errors.email ?\n                                <div className={CLASS.inputErrors}>{formik.errors.email}</div>\n                                : null\n                            }\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId={CONTROL_ID.formPassword} sm={4}>\n                        <Col sm={4}>\n                            <p className={CLASS.subtitleContent}>password</p>\n                        </Col>\n                        <Col sm={4}>\n                            <Form.Control type={FORM_TYPES.password}\n                                          placeholder={FORM_TYPES.password}\n                                          data-testid=\"required-input-edit-password\"\n                                          name={FORM_TYPES.password}\n                                          onChange={formik.handleChange}\n                                          value={formik.values.password}/>\n                            { formik.errors.password ?\n                                <div className={CLASS.inputErrors}>{formik.errors.password}</div>\n                                : null\n                            }\n                        </Col>\n                    </Form.Group>\n                    {displaySuccessMessage ?\n                        <p className={CLASS.subtitleContent}> changes saved!</p>\n                        :\n                        <Button variant={VARIANTS.outlineInfo}\n                                type={BUTTON_TYPES.submit}\n                                onClick={event => submitHandler(event)}>\n                            save changes\n                        </Button>\n                    }\n                </Col>\n            </Form.Group>\n         </Form>\n    )\n}\n\nexport default EditUser;","import { Button } from \"react-bootstrap\";\nimport {BUTTON_TYPES, VARIANTS} from \"../../../utils/enums\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useUserContext } from \"../../../context/userContext\";\n\n/**\n * A component that returns a button to log out a user from all devices.\n */\n\nfunction LogOutAllButton(){\n    let history = useHistory();\n    const { requestUrl } = useGeneralContext();\n    const { token } = useUserContext();\n    const [shouldFetch, setShouldFetch] = useState(false);\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setShouldFetch(true)\n    }\n\n    useEffect(()=>{\n            if(shouldFetch){\n                fetch(`${requestUrl}/users/logoutAll`, {\n                    method: 'POST',\n                    headers:{'Content-Type': 'application/json', 'Authorization':`Bearer ${token}`}\n                })\n                    .then(()=>history.push(\"/\", {from: '/home'}))\n                    .catch(e=>console.log(e))\n            }\n    }, [shouldFetch])\n    return(\n        <Button variant={VARIANTS.outlineInfo}\n                type={BUTTON_TYPES.submit}\n                onClick={e=>handleSubmit(e)}\n        >all devices</Button>\n    )\n}\n\nexport default LogOutAllButton;","import {BUTTON_TYPES, VARIANTS} from \"../../../utils/enums\";\nimport { Button } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useGeneralContext } from \"../../../context/generalContext\";\nimport { useUserContext } from \"../../../context/userContext\";\n\n/**\n * A component that returns a button to log out from the current device only.\n */\n\nfunction LogOutButton(){\n    let history = useHistory();\n\n    const { requestUrl } = useGeneralContext();\n    const { token } = useUserContext();\n\n    const [shouldFetch, setShouldFetch] = useState(false);\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setShouldFetch(true)\n    }\n    useEffect(()=>{\n        if(shouldFetch){\n            fetch(`${requestUrl}/users/logout`, {\n                method: 'POST',\n                headers:{'Content-Type': 'application/json', 'Authorization':`Bearer ${token}`}\n            })\n            .then(()=>history.push(\"/\", {from: '/home'}))\n            .catch(e=>console.log(e))\n        }\n    }, [shouldFetch])\n\n    return(\n        <Button variant={VARIANTS.outlineInfo}\n                type={BUTTON_TYPES.submit}\n                onClick={e=>handleSubmit(e)}>this device</Button>\n    )\n}\n\nexport default LogOutButton;","import { Col, Form } from \"react-bootstrap\";\nimport { CLASS } from \"../../../utils/enums\";\nimport React from \"react\";\nimport LogOutAllButton from \"./LogOutAllButton\";\nimport LogOutButton from \"./LogOutButton\";\n\n/**\n * A component that returns a log out section.\n */\n\nfunction LogOut(){\n    return(\n        <Form>\n            <Form.Label className={CLASS.projectTitle}>\n                log out\n            </Form.Label>\n            <Form.Group>\n                <p className={CLASS.subtitleContent}>\n                    where do you want to log out from?\n                </p>\n                <Col sm={10}>\n                    <Col sm={4}>\n                        <p  className={CLASS.subtitleContent}>\n                            <LogOutButton/>\n                        </p>\n                    </Col>\n                    <Col sm={4}>\n                        <p  className={CLASS.subtitleContent}>\n                            <LogOutAllButton/>\n                        </p>\n                    </Col>\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default LogOut;","import ProjectSection from \"./ProjectSection/ProjectSection\";\nimport Welcome from \"./WelcomeSection/Welcome\";\nimport { CLASS } from \"../../utils/enums\";\nimport CreateNewProject from \"./CreateNewProject/CreateNewProject\";\nimport { NewProjectContextProvider } from \"../../context/newProjectContext\";\nimport { useDisplayContext } from \"../../context/displayContext\";\nimport { EditContextProvider } from \"../../context/editContext\";\nimport { TasksContextProvider } from \"../../context/tasksContext\";\nimport DeletedMessage from \"./ProjectSection/DeletedMessage\";\nimport EditUser from \"./EditUser/EditUser\";\nimport LogOut from \"./LogOut/LogOut\";\n\n/**\n * A container component.\n */\n\nfunction ContentSection() {\n\n    const { displayWelcome,\n        displayProject,\n        displayNewProject,\n        displayDeletedMessage,\n        displayEditUser,\n        displayLogOut\n    } = useDisplayContext();\n\n    return (\n        <NewProjectContextProvider>\n                <div className={CLASS.content}>\n                    { displayWelcome ? <Welcome/> : null}\n                    <EditContextProvider>\n                        <TasksContextProvider>\n                        { displayProject ? <ProjectSection/> : null}\n                        </TasksContextProvider>\n                    </EditContextProvider>\n                        { displayNewProject ? <CreateNewProject/> : null}\n                    { displayDeletedMessage ? <DeletedMessage/> :null}\n                    { displayEditUser ?\n                    <EditUser/>: null}\n                    {displayLogOut ?\n                    <LogOut/>: null}\n                </div>\n        </NewProjectContextProvider>\n    )\n}\n\nexport default ContentSection;","import Header from \"./Header/Header\";\nimport SideBar from \"./SideBar/SideBar\";\nimport ContentSection from \"./ContentSection\";\nimport { CLASS } from \"../../utils/enums\";\nimport { CurrentProjectContextProvider } from \"../../context/currentProjectContext\";\nimport { DisplayContextProvider } from \"../../context/displayContext\";\nimport { RefreshProjectListContextProvider } from \"../../context/refreshProjectListContext\";\n\n/**\n * Main page component.\n */\n\nfunction MainPage() {\n    return(\n        <div className={CLASS.pageContainer}>\n            <DisplayContextProvider>\n            <Header/>\n                <CurrentProjectContextProvider>\n                    <RefreshProjectListContextProvider>\n                        <SideBar/>\n                        <ContentSection/>\n                    </RefreshProjectListContextProvider>\n                </CurrentProjectContextProvider>\n            </DisplayContextProvider>\n        </div>\n    )\n}\n\nexport default MainPage;","import './App.css';\nimport Container from \"react-bootstrap/Container\";\nimport SignInForm from \"./components/Content/common/SignInForm\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SignUp from \"./components/Content/common/SignUp\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport MainPage from \"./components/Content/MainPage\";\nimport { CLASS } from \"./utils/enums\";\nimport { ContextProvider } from \"./context/generalContext\";\nimport { UserContextProvider } from \"./context/userContext\";\nimport { AllUsersContextProvider } from \"./context/allUsersContext\";\n\nfunction App() {\n  return (\n    <ContextProvider>\n        <UserContextProvider>\n            <AllUsersContextProvider>\n                <div className=\"App\">\n                    <Router>\n                        <Switch>\n                            <Route path='/home'>\n                                <MainPage/>\n                            </Route>\n                            <Route path=\"/\">\n                                <div className={CLASS.background}>\n                                </div>\n                                <Container className={CLASS.mainContainer}>\n                                    <SignInForm/>\n                                    <SignUp/>\n                                </Container>\n                            </Route>\n                        </Switch>\n                    </Router>\n                </div>\n            </AllUsersContextProvider>\n        </UserContextProvider>\n    </ContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}